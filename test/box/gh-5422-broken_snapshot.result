env = require('test_run')
---
...
fio = require('fio')
---
...
test_run = env.new()
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function get_snapshot_name ()
    local shapshot = nil
    local directory = fio.pathjoin(fio.cwd(), 'gh-5422-broken_snapshot')
    for files in io.popen(string.format("ls %s", directory)):lines() do
        local snapshots = string.find(files, "snap")
        if (snapshots ~= nil) then
            shapshot = string.find(files, "%n")
            if (shapshot ~= nil) then
                shapshot = string.format("%s/%s", directory, files)
            end
        end
    end
    return shapshot
end;
---
...
function get_file_size(filename)
    local file = io.open(filename, "r")
    local size = file:seek("end")
    io.close(file)
    return size
end;
---
...
function write_garbage_with_restore_or_save(filename, offset, count, restore)
    if restore == true then
        os.execute(string.format('cp %s.save %s', snapshot, snapshot))
    else
        os.execute(string.format('cp %s %s.save', filename, filename))
    end
    local file = io.open(filename, "r+b")
    file:seek("set", offset)
    for i = 1, count do
        file:write(math.random(1,254))
    end
    io.close(file)
end;
---
...
function check_valid_snapshot_data(count)
    local val = test_run:eval('test', "box.space.test:select()")[1]
    for i = 1, count do
        if val[i] == nil then
            return false
        end
    end
    return true
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
garbage_size = 1000
---
...
test_run:cmd("create server test with script='box/gh-5422-broken_snapshot.lua'")
---
- true
...
test_run:cmd("start server test")
---
- true
...
test_run:cmd("switch test")
---
- true
...
items_count = 20000
---
...
-- Create space and snapshot file
space = box.schema.space.create('test', { engine = "memtx" })
---
...
space:format({ {name = 'id', type = 'unsigned'} })
---
...
index = space:create_index('primary', { parts = {'id'} })
---
...
for key = 1, items_count do space:insert({key}) end
---
...
box.snapshot()
---
- ok
...
test_run:cmd("switch default")
---
- true
...
items_count = test_run:eval("test", "items_count")[1]
---
...
snapshot = get_snapshot_name()
---
...
size = get_file_size(snapshot)
---
...
-- Write data at the end of the file
write_garbage_with_restore_or_save(snapshot, size, garbage_size, false)
---
...
test_run:cmd("restart server test with script='box/gh-5422-broken_snapshot.lua'")
---
- true
...
test_run:cmd("switch default")
---
- true
...
-- Check that all data valid
assert(check_valid_snapshot_data(items_count) == true)
---
- true
...
-- Restore snapshot
os.execute(string.format('cp %s.save %s', snapshot, snapshot))
---
- 0
...
-- truncate
os.execute(string.format('dd if=%s.save of=%s bs=%d count=1', snapshot, snapshot, size / 2))
---
- 0
...
test_run:cmd("restart server test with script='box/gh-5422-broken_snapshot.lua'")
---
- true
...
test_run:cmd("switch default")
---
- true
...
-- Check that some data valid
assert(check_valid_snapshot_data(items_count / 4) == true)
---
- true
...
-- Restore snapshot and write garbage at the middle of file
write_garbage_with_restore_or_save(snapshot, size / 2, garbage_size, true)
---
...
test_run:cmd("restart server test with script='box/gh-5422-broken_snapshot.lua'")
---
- true
...
test_run:cmd("switch default")
---
- true
...
-- Check that some data valid.
-- Count of valid data is greater than we truncate snapshot.
assert(check_valid_snapshot_data(items_count / 2) == true)
---
- true
...
-- Restore snapshot and write big garbage at the start of the file
write_garbage_with_restore_or_save(snapshot, 5000, garbage_size, true)
---
...
os.remove(string.format('%s.save', snapshot))
---
- true
...
test_run:cmd("stop server test")
---
- true
...
-- Check that we unable to start with corrupted system space
test_run:cmd("start server test with crash_expected=True")
---
- false
...
log = string.format("%s/%s.%s", fio.cwd(), "gh-5422-broken_snapshot", "log")
---
...
-- We must not find ER_UNKNOWN_REPLICA in log file, so grep return not 0
assert(os.execute(string.format("cat %s | grep ER_UNKNOWN_REPLICA:", log)) ~= 0)
---
- true
...
test_run:cmd("cleanup server test")
---
- true
...
test_run:cmd("delete server test")
---
- true
...
